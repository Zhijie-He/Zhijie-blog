(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{320:function(s,a,t){"use strict";t.r(a);var e=t(14),n=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"macos"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#macos"}},[s._v("#")]),s._v(" MacOS")]),s._v(" "),a("ol",[a("li",[s._v("检测当前硬件详细信息 "),a("code",[s._v("system_profiler SPDisplaysDataType")])])]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("base"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" zhijiehe@zhijiedeAir coding-tips % system_profiler SPDisplaysDataType\nGraphics/Displays:\n\n    Apple M1:\n\n      Chipset Model: Apple M1\n      Type: GPU\n      Bus: Built-In\n      Total Number of Cores: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v("\n      Vendor: Apple "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("0x106b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      Metal Support: Metal "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n      Displays:\n        LG ULTRAWIDE:\n          Resolution: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2560")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1080")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("UW-UXGA - Ultra Wide - Ultra Extended Graphics Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n          UI Looks like: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2560")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1080")]),s._v(" @ "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("75")]),s._v(".00Hz\n          Main Display: Yes\n          Mirror: Off\n          Online: Yes\n          Rotation: Supported\n        Color LCD:\n          Display Type: Built-In Retina LCD\n          Resolution: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2560")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1600")]),s._v(" Retina\n          Mirror: Off\n          Online: Yes\n          Automatically Adjust Brightness: Yes\n          Connection Type: Internal\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[s._v("MPS和GPU的区别")])]),s._v(" "),a("p",[s._v("关于MPS（Metal Performance Shaders）和GPU数量的概念，有必要区分一下两者之间的区别：")]),s._v(" "),a("ul",[a("li",[s._v("GPU（图形处理单元）:\nGPU是硬件设备，具体指的是电脑、手机或其他设备中用于处理图形和计算任务的实体。在一台设备上，可以有一个或多个GPU。例如，一些高端的计算机或专业的图形工作站可能装有多个独立的GPU卡，用于高性能计算或图形处理。")]),s._v(" "),a("li",[s._v("MPS（Metal Performance Shaders）:\nMPS并不是一个硬件设备，而是一套运行在Apple设备上，用于高效执行图形和计算任务的库和API。MPS设计来利用Apple设备上的GPU，优化和加速各种操作，比如图像处理、机器学习等。")])]),s._v(" "),a("p",[s._v("MPS的“数量”并不像GPU那样计量。你不会说一个设备上有多少个MPS，因为MPS只是软件层面的技术实现。你可能会关注的是设备上有多少GPU，以及这些GPU是否支持MPS，以及支持到什么程度。")]),s._v(" "),a("h2",{attrs:{id:"mac的命令行配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mac的命令行配置"}},[s._v("#")]),s._v(" Mac的命令行配置")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://makeoptim.com/tool/terminal/",target:"_blank",rel:"noopener noreferrer"}},[s._v("工具 - 打造 Mac “完美”终端（Terminal），一篇就够了"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://blog.csdn.net/zangxueyuan88/article/details/113937379",target:"_blank",rel:"noopener noreferrer"}},[s._v("Mac OS 命令行终端工具iTerm2 + Oh my Zsh的安装配置"),a("OutboundLink")],1)])]),s._v(" "),a("h3",{attrs:{id:"安装iterm2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装iterm2"}},[s._v("#")]),s._v(" 安装iTerm2")]),s._v(" "),a("p",[s._v("去这个网址"),a("a",{attrs:{href:"https://iterm2.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://iterm2.com/"),a("OutboundLink")],1),s._v("进行安装即可")]),s._v(" "),a("ul",[a("li",[s._v("iTerm2 是一款完全免费，专为 Mac OS 用户打造多命令行应用。")]),s._v(" "),a("li",[s._v("安装完成后，在/bin目录下会多出一个zsh的文件。")]),s._v(" "),a("li",[s._v("Mac系统默认使用dash作为终端，可以使用命令修改默认使用zsh：chsh -s /bin/zsh")]),s._v(" "),a("li",[s._v("如果想修改回默认dash，同样使用chsh命令即可：chsh -s /bin/bash")]),s._v(" "),a("li",[s._v("Zsh 是一款强大的虚拟终端，既是一个系统的虚拟终端，也可以作为一个脚本语言的交互解析器。")])]),s._v(" "),a("h4",{attrs:{id:"设置iterm2的的背景图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置iterm2的的背景图"}},[s._v("#")]),s._v(" 设置iTerm2的的背景图")]),s._v(" "),a("p",[s._v("点击iTerm2>settings>profiles，然后点击window这个选项就可以自定义背景图片。\n其次如果想要一张图片作为所有panel的背景图，则在iTerm2>settings>Appearence然后点击Panes，取消选择Sepearate background images per pane.")]),s._v(" "),a("h4",{attrs:{id:"设置iterm2的主题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置iterm2的主题"}},[s._v("#")]),s._v(" 设置iTerm2的主题")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/ohmyzsh/ohmyzsh/wiki/Themes",target:"_blank",rel:"noopener noreferrer"}},[s._v("iterm2的主题"),a("OutboundLink")],1)])]),s._v(" "),a("p",[s._v("这个网站上有他对应的主题，找到想要的主题然后修改"),a("code",[s._v("~/.zshrc")]),s._v("文件里面的主题配置即可")]),s._v(" "),a("h4",{attrs:{id:"使用powerlevel10k主题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用powerlevel10k主题"}},[s._v("#")]),s._v(" 使用Powerlevel10k主题")]),s._v(" "),a("p",[s._v("Oh My Zsh 有上百个自带主题，以及其他的外部主题。而 Powerlevel10k 正是现在最流行的主题之一。")]),s._v(" "),a("p",[s._v("执行以下命令，安装 Powerlevel10k。")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" clone "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--depth")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" https://gitee.com/romkatv/powerlevel10k.git "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${ZSH_CUSTOM"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":-")]),s._v("~"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(".oh-my-zsh"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("custom}")]),s._v("/themes/powerlevel10k\n")])])]),a("p",[s._v("在 zsh 的配置文件 ~/.zshrc 中设置 "),a("code",[s._v('ZSH_THEME="powerlevel10k/powerlevel10k"')])]),s._v(" "),a("p",[s._v("设置完成后，重启 iTerm2 会提示安装需要的字体，根据提示安装即可。")]),s._v(" "),a("p",[s._v("如果对安装主题配置不满意，可以重新配置主题，在命令行中输入"),a("code",[s._v("p10k configure")]),s._v("。")]),s._v(" "),a("h3",{attrs:{id:"安装on-my-zsh"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装on-my-zsh"}},[s._v("#")]),s._v(" 安装"),a("a",{attrs:{href:"https://ohmyz.sh/",target:"_blank",rel:"noopener noreferrer"}},[s._v("on my zsh"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("Oh My Zsh 是一款社区驱动的命令行工具，它基于 zsh 命令行，提供了主题配置，插件机制，已经内置的便捷操作。给我们一种全新的方式使用命令行。")]),s._v(" "),a("blockquote",[a("p",[s._v("Oh My Zsh is a delightful, open source, community-driven framework for managing your Zsh configuration. It comes bundled with thousands of helpful functions, helpers, plugins, themes, and a few things that make you shout...")])]),s._v(" "),a("p",[s._v("如果要安装on my zsh可以通过以下的命令")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("通过curl\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sh")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-fsSL")]),s._v(" https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),s._v("\nor \n通过wget\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sh")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-c")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("wget")]),s._v(" https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-O")]),s._v(" -"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),s._v("\n")])])]),a("p",[s._v("注意： 安装完成on my zsh之后，发现conda命令访问不到了")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/158703094",target:"_blank",rel:"noopener noreferrer"}},[s._v("on my zsh找不到conda"),a("OutboundLink")],1)])]),s._v(" "),a("blockquote",[a("p",[s._v("终端中zsh的可访问的程序一般放在/bin, /usr/bin, /usr/local/bin，~/bin目录下；而最新安装的Anaconda会默认安装在/Users/username下或者/opt下，导致环境变量没有写入到终端配置文件。笔者的Anaconda默认被安装在了~/opt目录下，直接采用网络上的代码行不通，需要改一下路径。")])]),s._v(" "),a("p",[s._v("解决办法：找到anacoda的路径，我的anaconda3的安装路径在/opt/anaconda3下面。所以进行修改~/.zshrc")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#切记先返回跟目录")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" ~\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#vim打开zsh配置文件")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("vi")]),s._v(" .zshrc\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#添加指令")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("PATH")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/opt/anaconda3/bin:'),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$PATH")]),s._v('"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#激活配置文件")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v(" .zshrc\n")])])]),a("p",[s._v("激活之后发现可以找到conda但是切换环境还需要"),a("code",[s._v("conda init zsh")]),s._v("，这样做之后记得"),a("code",[s._v("source .zshrc")]),s._v("这个文件之后，就发现conda的默认环境就激活了。")]),s._v(" "),a("h3",{attrs:{id:"安装语法高亮插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装语法高亮插件"}},[s._v("#")]),s._v(" 安装语法高亮插件")]),s._v(" "),a("p",[s._v("下载插件")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" ~/.oh-my-zsh/custom/plugins\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" clone https://github.com/zsh-users/zsh-syntax-highlighting.git\n")])])]),a("p",[s._v("启用插件")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("vi")]),s._v(" ~/.zshrc\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("plugins")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v("\n  zsh-syntax-highlighting\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v(" ~/.zshrc\n")])])]),a("h3",{attrs:{id:"自动补全插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动补全插件"}},[s._v("#")]),s._v(" 自动补全插件")]),s._v(" "),a("p",[s._v("下载插件")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" ~/.oh-my-zsh/custom/plugins\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" clone https://github.com/zsh-users/zsh-autosuggestions.git\n")])])]),a("p",[s._v("启用插件")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("vi")]),s._v(" ~/.zshrc\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("plugins")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v("\n  zsh-syntax-highlighting\n  zsh-autosuggestions\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v(" ~/.zshrc\n")])])]),a("h3",{attrs:{id:"自动跳转插件-autojump"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动跳转插件-autojump"}},[s._v("#")]),s._v(" 自动跳转插件 autojump")]),s._v(" "),a("p",[s._v("autojump 可以记录下之前 cd 命令访过的所有目录，下次要去那个目录时不需要输入完整的路径，直接 j somedir 即可到达，甚至那个目标目录的名称只输入开头即可。")]),s._v(" "),a("p",[s._v("执行以下命令，安装 autojump。")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("brew "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" autojump\n")])])]),a("p",[s._v("在 zsh 的配置文件 ~/.zshrc 中的 plugins 中加入 autojump\n启用插件")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("vi")]),s._v(" ~/.zshrc\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("plugins")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v("\n  zsh-syntax-highlighting\n  zsh-autosuggestions\n  autojump\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v(" ~/.zshrc\n")])])]),a("h3",{attrs:{id:"设置vs-code字体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置vs-code字体"}},[s._v("#")]),s._v(" 设置VS code字体")]),s._v(" "),a("p",[s._v("默认情况下，在 VSCode 中选择 zsh 作为默认 Shell 会出现乱码现象。原因是 Oh My Zsh 配置完成后，使用了 "),a("code",[s._v("MesloLGS NF")]),s._v(" 字体。")]),s._v(" "),a("p",[s._v("因此，修复乱码只需要在设置中找到 code > preferences > settings, 输入font，设置"),a("strong",[s._v("terminal font")]),s._v("成 "),a("code",[s._v("MesloLGS NF")]),s._v(" 即可。")]),s._v(" "),a("h2",{attrs:{id:"iterm2-快捷键"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iterm2-快捷键"}},[s._v("#")]),s._v(" iTerm2 快捷键")]),s._v(" "),a("ul",[a("li",[s._v("crtl + d 垂直分屏")]),s._v(" "),a("li",[s._v("crtl + shift + d 水平分屏")]),s._v(" "),a("li",[s._v("command + f 搜索&查找，如果输入搜索内容后， shift+tab，则自动将查找内容的左边选中并复制。按 esc 退出搜索。")]),s._v(" "),a("li",[s._v("command + r 或 ctrl + l 清空屏幕，而且只是换到新一屏，不会像 clear 一样创建一个空屏")])])])}),[],!1,null,null,null);a.default=n.exports}}]);